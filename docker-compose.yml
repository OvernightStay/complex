services:
  db:
    image: postgres:14
    container_name: db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5432:5432"

  web:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        DB_NAME: ${DB_NAME}
        DB_USER: ${DB_USER}
        DB_PASSWORD: ${DB_PASSWORD}
        EMAIL_HOST: ${EMAIL_HOST}
        EMAIL_PORT: ${EMAIL_PORT}
        EMAIL_HOST_USER: ${EMAIL_HOST_USER}
        EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
        DEFAULT_FROM_EMAIL: ${DEFAULT_FROM_EMAIL}
    container_name: backend
    depends_on:
      - db
    environment:
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      EMAIL_HOST: ${EMAIL_HOST}
      EMAIL_PORT: ${EMAIL_PORT}
      EMAIL_HOST_USER: ${EMAIL_HOST_USER}
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
      DEFAULT_FROM_EMAIL: ${DEFAULT_FROM_EMAIL}
      DJANGO_SETTINGS_MODULE: pro.settings
    volumes:
      - static_volume:/static
      - ./backend/pro/media:/media
      - ./backend/entrypoint.sh:/entrypoint.sh
    expose:
      - "8000"
    command: ["gunicorn", "--bind", "0.0.0.0:8000", "pro.wsgi:application"]

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    working_dir: /app
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    command: ["npm", "start"]

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: nginx
    depends_on:
      - web
      - frontend
    ports:
      - "80:80"
      - "8000:8000"  # Добавили маппинг порта 8000
    volumes:
      - static_volume:/static:ro
      - ./backend/pro/media:/media
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/servers:/etc/nginx/servers:ro
    restart: always

volumes:
  postgres_data:
  static_volume:
